//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.5472
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by xsd, Version=2.0.50727.42.
// 


/// <summary>
///Represents a strongly typed in-memory cache of data.
///</summary>
[global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
[global::System.Serializable()]
[global::System.ComponentModel.DesignerCategoryAttribute("code")]
[global::System.ComponentModel.ToolboxItem(true)]
[global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
[global::System.Xml.Serialization.XmlRootAttribute("NewDataSet")]
[global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
public partial class NewDataSet : global::System.Data.DataSet {
    
    private SiteDataTable tableSite;
    
    private rulesDataTable tablerules;
    
    private groupDataTable tablegroup;
    
    private expressionDataTable tableexpression;
    
    private AndDataTable tableAnd;
    
    private EqualsDataTable tableEquals;
    
    private NotDataTable tableNot;
    
    private InGroupDataTable tableInGroup;
    
    private OrDataTable tableOr;
    
    private global::System.Data.DataRelation relationSite_rules;
    
    private global::System.Data.DataRelation relationrules_group;
    
    private global::System.Data.DataRelation relationrules_expression;
    
    private global::System.Data.DataRelation relationexpression_And;
    
    private global::System.Data.DataRelation relationOr_Equals;
    
    private global::System.Data.DataRelation relationNot_Equals;
    
    private global::System.Data.DataRelation relationAnd_Equals;
    
    private global::System.Data.DataRelation relationexpression_Equals;
    
    private global::System.Data.DataRelation relationAnd_Not;
    
    private global::System.Data.DataRelation relationexpression_Not;
    
    private global::System.Data.DataRelation relationNot_InGroup;
    
    private global::System.Data.DataRelation relationAnd_InGroup;
    
    private global::System.Data.DataRelation relationexpression_InGroup;
    
    private global::System.Data.DataRelation relationNot_Or;
    
    private global::System.Data.DataRelation relationAnd_Or;
    
    private global::System.Data.DataRelation relationexpression_Or;
    
    private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public NewDataSet() {
        this.BeginInit();
        this.InitClass();
        global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
        base.Tables.CollectionChanged += schemaChangedHandler;
        base.Relations.CollectionChanged += schemaChangedHandler;
        this.EndInit();
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    protected NewDataSet(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
            base(info, context, false) {
        if ((this.IsBinarySerialized(info, context) == true)) {
            this.InitVars(false);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler1;
            this.Relations.CollectionChanged += schemaChangedHandler1;
            return;
        }
        string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
        if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
            global::System.Data.DataSet ds = new global::System.Data.DataSet();
            ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            if ((ds.Tables["Site"] != null)) {
                base.Tables.Add(new SiteDataTable(ds.Tables["Site"]));
            }
            if ((ds.Tables["rules"] != null)) {
                base.Tables.Add(new rulesDataTable(ds.Tables["rules"]));
            }
            if ((ds.Tables["group"] != null)) {
                base.Tables.Add(new groupDataTable(ds.Tables["group"]));
            }
            if ((ds.Tables["expression"] != null)) {
                base.Tables.Add(new expressionDataTable(ds.Tables["expression"]));
            }
            if ((ds.Tables["And"] != null)) {
                base.Tables.Add(new AndDataTable(ds.Tables["And"]));
            }
            if ((ds.Tables["Equals"] != null)) {
                base.Tables.Add(new EqualsDataTable(ds.Tables["Equals"]));
            }
            if ((ds.Tables["Not"] != null)) {
                base.Tables.Add(new NotDataTable(ds.Tables["Not"]));
            }
            if ((ds.Tables["InGroup"] != null)) {
                base.Tables.Add(new InGroupDataTable(ds.Tables["InGroup"]));
            }
            if ((ds.Tables["Or"] != null)) {
                base.Tables.Add(new OrDataTable(ds.Tables["Or"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        else {
            this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
        }
        this.GetSerializationData(info, context);
        global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
        base.Tables.CollectionChanged += schemaChangedHandler;
        this.Relations.CollectionChanged += schemaChangedHandler;
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.ComponentModel.Browsable(false)]
    [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
    public SiteDataTable Site {
        get {
            return this.tableSite;
        }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.ComponentModel.Browsable(false)]
    [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
    public rulesDataTable rules {
        get {
            return this.tablerules;
        }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.ComponentModel.Browsable(false)]
    [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
    public groupDataTable group {
        get {
            return this.tablegroup;
        }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.ComponentModel.Browsable(false)]
    [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
    public expressionDataTable expression {
        get {
            return this.tableexpression;
        }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.ComponentModel.Browsable(false)]
    [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
    public AndDataTable And {
        get {
            return this.tableAnd;
        }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.ComponentModel.Browsable(false)]
    [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
    public EqualsDataTable Equals {
        get {
            return this.tableEquals;
        }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.ComponentModel.Browsable(false)]
    [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
    public NotDataTable Not {
        get {
            return this.tableNot;
        }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.ComponentModel.Browsable(false)]
    [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
    public InGroupDataTable InGroup {
        get {
            return this.tableInGroup;
        }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.ComponentModel.Browsable(false)]
    [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
    public OrDataTable Or {
        get {
            return this.tableOr;
        }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.ComponentModel.BrowsableAttribute(true)]
    [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
    public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
        get {
            return this._schemaSerializationMode;
        }
        set {
            this._schemaSerializationMode = value;
        }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
    public new global::System.Data.DataTableCollection Tables {
        get {
            return base.Tables;
        }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
    public new global::System.Data.DataRelationCollection Relations {
        get {
            return base.Relations;
        }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    protected override void InitializeDerivedDataSet() {
        this.BeginInit();
        this.InitClass();
        this.EndInit();
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public override global::System.Data.DataSet Clone() {
        NewDataSet cln = ((NewDataSet)(base.Clone()));
        cln.InitVars();
        cln.SchemaSerializationMode = this.SchemaSerializationMode;
        return cln;
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    protected override bool ShouldSerializeTables() {
        return false;
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    protected override bool ShouldSerializeRelations() {
        return false;
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
        if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
            this.Reset();
            global::System.Data.DataSet ds = new global::System.Data.DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["Site"] != null)) {
                base.Tables.Add(new SiteDataTable(ds.Tables["Site"]));
            }
            if ((ds.Tables["rules"] != null)) {
                base.Tables.Add(new rulesDataTable(ds.Tables["rules"]));
            }
            if ((ds.Tables["group"] != null)) {
                base.Tables.Add(new groupDataTable(ds.Tables["group"]));
            }
            if ((ds.Tables["expression"] != null)) {
                base.Tables.Add(new expressionDataTable(ds.Tables["expression"]));
            }
            if ((ds.Tables["And"] != null)) {
                base.Tables.Add(new AndDataTable(ds.Tables["And"]));
            }
            if ((ds.Tables["Equals"] != null)) {
                base.Tables.Add(new EqualsDataTable(ds.Tables["Equals"]));
            }
            if ((ds.Tables["Not"] != null)) {
                base.Tables.Add(new NotDataTable(ds.Tables["Not"]));
            }
            if ((ds.Tables["InGroup"] != null)) {
                base.Tables.Add(new InGroupDataTable(ds.Tables["InGroup"]));
            }
            if ((ds.Tables["Or"] != null)) {
                base.Tables.Add(new OrDataTable(ds.Tables["Or"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        else {
            this.ReadXml(reader);
            this.InitVars();
        }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
        global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
        this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
        stream.Position = 0;
        return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal void InitVars() {
        this.InitVars(true);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal void InitVars(bool initTable) {
        this.tableSite = ((SiteDataTable)(base.Tables["Site"]));
        if ((initTable == true)) {
            if ((this.tableSite != null)) {
                this.tableSite.InitVars();
            }
        }
        this.tablerules = ((rulesDataTable)(base.Tables["rules"]));
        if ((initTable == true)) {
            if ((this.tablerules != null)) {
                this.tablerules.InitVars();
            }
        }
        this.tablegroup = ((groupDataTable)(base.Tables["group"]));
        if ((initTable == true)) {
            if ((this.tablegroup != null)) {
                this.tablegroup.InitVars();
            }
        }
        this.tableexpression = ((expressionDataTable)(base.Tables["expression"]));
        if ((initTable == true)) {
            if ((this.tableexpression != null)) {
                this.tableexpression.InitVars();
            }
        }
        this.tableAnd = ((AndDataTable)(base.Tables["And"]));
        if ((initTable == true)) {
            if ((this.tableAnd != null)) {
                this.tableAnd.InitVars();
            }
        }
        this.tableEquals = ((EqualsDataTable)(base.Tables["Equals"]));
        if ((initTable == true)) {
            if ((this.tableEquals != null)) {
                this.tableEquals.InitVars();
            }
        }
        this.tableNot = ((NotDataTable)(base.Tables["Not"]));
        if ((initTable == true)) {
            if ((this.tableNot != null)) {
                this.tableNot.InitVars();
            }
        }
        this.tableInGroup = ((InGroupDataTable)(base.Tables["InGroup"]));
        if ((initTable == true)) {
            if ((this.tableInGroup != null)) {
                this.tableInGroup.InitVars();
            }
        }
        this.tableOr = ((OrDataTable)(base.Tables["Or"]));
        if ((initTable == true)) {
            if ((this.tableOr != null)) {
                this.tableOr.InitVars();
            }
        }
        this.relationSite_rules = this.Relations["Site_rules"];
        this.relationrules_group = this.Relations["rules_group"];
        this.relationrules_expression = this.Relations["rules_expression"];
        this.relationexpression_And = this.Relations["expression_And"];
        this.relationOr_Equals = this.Relations["Or_Equals"];
        this.relationNot_Equals = this.Relations["Not_Equals"];
        this.relationAnd_Equals = this.Relations["And_Equals"];
        this.relationexpression_Equals = this.Relations["expression_Equals"];
        this.relationAnd_Not = this.Relations["And_Not"];
        this.relationexpression_Not = this.Relations["expression_Not"];
        this.relationNot_InGroup = this.Relations["Not_InGroup"];
        this.relationAnd_InGroup = this.Relations["And_InGroup"];
        this.relationexpression_InGroup = this.Relations["expression_InGroup"];
        this.relationNot_Or = this.Relations["Not_Or"];
        this.relationAnd_Or = this.Relations["And_Or"];
        this.relationexpression_Or = this.Relations["expression_Or"];
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    private void InitClass() {
        this.DataSetName = "NewDataSet";
        this.Prefix = "";
        this.Locale = new global::System.Globalization.CultureInfo("");
        this.EnforceConstraints = true;
        this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        this.tableSite = new SiteDataTable();
        base.Tables.Add(this.tableSite);
        this.tablerules = new rulesDataTable();
        base.Tables.Add(this.tablerules);
        this.tablegroup = new groupDataTable();
        base.Tables.Add(this.tablegroup);
        this.tableexpression = new expressionDataTable();
        base.Tables.Add(this.tableexpression);
        this.tableAnd = new AndDataTable();
        base.Tables.Add(this.tableAnd);
        this.tableEquals = new EqualsDataTable();
        base.Tables.Add(this.tableEquals);
        this.tableNot = new NotDataTable();
        base.Tables.Add(this.tableNot);
        this.tableInGroup = new InGroupDataTable();
        base.Tables.Add(this.tableInGroup);
        this.tableOr = new OrDataTable();
        base.Tables.Add(this.tableOr);
        global::System.Data.ForeignKeyConstraint fkc;
        fkc = new global::System.Data.ForeignKeyConstraint("Site_rules", new global::System.Data.DataColumn[] {
                    this.tableSite.Site_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tablerules.Site_IdColumn});
        this.tablerules.Constraints.Add(fkc);
        fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
        fkc.DeleteRule = global::System.Data.Rule.Cascade;
        fkc.UpdateRule = global::System.Data.Rule.Cascade;
        fkc = new global::System.Data.ForeignKeyConstraint("rules_group", new global::System.Data.DataColumn[] {
                    this.tablerules.rules_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tablegroup.rules_IdColumn});
        this.tablegroup.Constraints.Add(fkc);
        fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
        fkc.DeleteRule = global::System.Data.Rule.Cascade;
        fkc.UpdateRule = global::System.Data.Rule.Cascade;
        fkc = new global::System.Data.ForeignKeyConstraint("rules_expression", new global::System.Data.DataColumn[] {
                    this.tablerules.rules_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tableexpression.rules_IdColumn});
        this.tableexpression.Constraints.Add(fkc);
        fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
        fkc.DeleteRule = global::System.Data.Rule.Cascade;
        fkc.UpdateRule = global::System.Data.Rule.Cascade;
        fkc = new global::System.Data.ForeignKeyConstraint("expression_And", new global::System.Data.DataColumn[] {
                    this.tableexpression.expression_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tableAnd.expression_IdColumn});
        this.tableAnd.Constraints.Add(fkc);
        fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
        fkc.DeleteRule = global::System.Data.Rule.Cascade;
        fkc.UpdateRule = global::System.Data.Rule.Cascade;
        fkc = new global::System.Data.ForeignKeyConstraint("Or_Equals", new global::System.Data.DataColumn[] {
                    this.tableOr.Or_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tableEquals.Or_IdColumn});
        this.tableEquals.Constraints.Add(fkc);
        fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
        fkc.DeleteRule = global::System.Data.Rule.Cascade;
        fkc.UpdateRule = global::System.Data.Rule.Cascade;
        fkc = new global::System.Data.ForeignKeyConstraint("Not_Equals", new global::System.Data.DataColumn[] {
                    this.tableNot.Not_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tableEquals.Not_IdColumn});
        this.tableEquals.Constraints.Add(fkc);
        fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
        fkc.DeleteRule = global::System.Data.Rule.Cascade;
        fkc.UpdateRule = global::System.Data.Rule.Cascade;
        fkc = new global::System.Data.ForeignKeyConstraint("And_Equals", new global::System.Data.DataColumn[] {
                    this.tableAnd.And_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tableEquals.And_IdColumn});
        this.tableEquals.Constraints.Add(fkc);
        fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
        fkc.DeleteRule = global::System.Data.Rule.Cascade;
        fkc.UpdateRule = global::System.Data.Rule.Cascade;
        fkc = new global::System.Data.ForeignKeyConstraint("expression_Equals", new global::System.Data.DataColumn[] {
                    this.tableexpression.expression_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tableEquals.expression_IdColumn});
        this.tableEquals.Constraints.Add(fkc);
        fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
        fkc.DeleteRule = global::System.Data.Rule.Cascade;
        fkc.UpdateRule = global::System.Data.Rule.Cascade;
        fkc = new global::System.Data.ForeignKeyConstraint("And_Not", new global::System.Data.DataColumn[] {
                    this.tableAnd.And_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tableNot.And_IdColumn});
        this.tableNot.Constraints.Add(fkc);
        fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
        fkc.DeleteRule = global::System.Data.Rule.Cascade;
        fkc.UpdateRule = global::System.Data.Rule.Cascade;
        fkc = new global::System.Data.ForeignKeyConstraint("expression_Not", new global::System.Data.DataColumn[] {
                    this.tableexpression.expression_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tableNot.expression_IdColumn});
        this.tableNot.Constraints.Add(fkc);
        fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
        fkc.DeleteRule = global::System.Data.Rule.Cascade;
        fkc.UpdateRule = global::System.Data.Rule.Cascade;
        fkc = new global::System.Data.ForeignKeyConstraint("Not_InGroup", new global::System.Data.DataColumn[] {
                    this.tableNot.Not_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tableInGroup.Not_IdColumn});
        this.tableInGroup.Constraints.Add(fkc);
        fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
        fkc.DeleteRule = global::System.Data.Rule.Cascade;
        fkc.UpdateRule = global::System.Data.Rule.Cascade;
        fkc = new global::System.Data.ForeignKeyConstraint("And_InGroup", new global::System.Data.DataColumn[] {
                    this.tableAnd.And_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tableInGroup.And_IdColumn});
        this.tableInGroup.Constraints.Add(fkc);
        fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
        fkc.DeleteRule = global::System.Data.Rule.Cascade;
        fkc.UpdateRule = global::System.Data.Rule.Cascade;
        fkc = new global::System.Data.ForeignKeyConstraint("expression_InGroup", new global::System.Data.DataColumn[] {
                    this.tableexpression.expression_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tableInGroup.expression_IdColumn});
        this.tableInGroup.Constraints.Add(fkc);
        fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
        fkc.DeleteRule = global::System.Data.Rule.Cascade;
        fkc.UpdateRule = global::System.Data.Rule.Cascade;
        fkc = new global::System.Data.ForeignKeyConstraint("Not_Or", new global::System.Data.DataColumn[] {
                    this.tableNot.Not_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tableOr.Not_IdColumn});
        this.tableOr.Constraints.Add(fkc);
        fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
        fkc.DeleteRule = global::System.Data.Rule.Cascade;
        fkc.UpdateRule = global::System.Data.Rule.Cascade;
        fkc = new global::System.Data.ForeignKeyConstraint("And_Or", new global::System.Data.DataColumn[] {
                    this.tableAnd.And_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tableOr.And_IdColumn});
        this.tableOr.Constraints.Add(fkc);
        fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
        fkc.DeleteRule = global::System.Data.Rule.Cascade;
        fkc.UpdateRule = global::System.Data.Rule.Cascade;
        fkc = new global::System.Data.ForeignKeyConstraint("expression_Or", new global::System.Data.DataColumn[] {
                    this.tableexpression.expression_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tableOr.expression_IdColumn});
        this.tableOr.Constraints.Add(fkc);
        fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
        fkc.DeleteRule = global::System.Data.Rule.Cascade;
        fkc.UpdateRule = global::System.Data.Rule.Cascade;
        this.relationSite_rules = new global::System.Data.DataRelation("Site_rules", new global::System.Data.DataColumn[] {
                    this.tableSite.Site_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tablerules.Site_IdColumn}, false);
        this.relationSite_rules.Nested = true;
        this.Relations.Add(this.relationSite_rules);
        this.relationrules_group = new global::System.Data.DataRelation("rules_group", new global::System.Data.DataColumn[] {
                    this.tablerules.rules_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tablegroup.rules_IdColumn}, false);
        this.relationrules_group.Nested = true;
        this.Relations.Add(this.relationrules_group);
        this.relationrules_expression = new global::System.Data.DataRelation("rules_expression", new global::System.Data.DataColumn[] {
                    this.tablerules.rules_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tableexpression.rules_IdColumn}, false);
        this.relationrules_expression.Nested = true;
        this.Relations.Add(this.relationrules_expression);
        this.relationexpression_And = new global::System.Data.DataRelation("expression_And", new global::System.Data.DataColumn[] {
                    this.tableexpression.expression_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tableAnd.expression_IdColumn}, false);
        this.relationexpression_And.Nested = true;
        this.Relations.Add(this.relationexpression_And);
        this.relationOr_Equals = new global::System.Data.DataRelation("Or_Equals", new global::System.Data.DataColumn[] {
                    this.tableOr.Or_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tableEquals.Or_IdColumn}, false);
        this.relationOr_Equals.Nested = true;
        this.Relations.Add(this.relationOr_Equals);
        this.relationNot_Equals = new global::System.Data.DataRelation("Not_Equals", new global::System.Data.DataColumn[] {
                    this.tableNot.Not_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tableEquals.Not_IdColumn}, false);
        this.relationNot_Equals.Nested = true;
        this.Relations.Add(this.relationNot_Equals);
        this.relationAnd_Equals = new global::System.Data.DataRelation("And_Equals", new global::System.Data.DataColumn[] {
                    this.tableAnd.And_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tableEquals.And_IdColumn}, false);
        this.relationAnd_Equals.Nested = true;
        this.Relations.Add(this.relationAnd_Equals);
        this.relationexpression_Equals = new global::System.Data.DataRelation("expression_Equals", new global::System.Data.DataColumn[] {
                    this.tableexpression.expression_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tableEquals.expression_IdColumn}, false);
        this.relationexpression_Equals.Nested = true;
        this.Relations.Add(this.relationexpression_Equals);
        this.relationAnd_Not = new global::System.Data.DataRelation("And_Not", new global::System.Data.DataColumn[] {
                    this.tableAnd.And_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tableNot.And_IdColumn}, false);
        this.relationAnd_Not.Nested = true;
        this.Relations.Add(this.relationAnd_Not);
        this.relationexpression_Not = new global::System.Data.DataRelation("expression_Not", new global::System.Data.DataColumn[] {
                    this.tableexpression.expression_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tableNot.expression_IdColumn}, false);
        this.relationexpression_Not.Nested = true;
        this.Relations.Add(this.relationexpression_Not);
        this.relationNot_InGroup = new global::System.Data.DataRelation("Not_InGroup", new global::System.Data.DataColumn[] {
                    this.tableNot.Not_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tableInGroup.Not_IdColumn}, false);
        this.relationNot_InGroup.Nested = true;
        this.Relations.Add(this.relationNot_InGroup);
        this.relationAnd_InGroup = new global::System.Data.DataRelation("And_InGroup", new global::System.Data.DataColumn[] {
                    this.tableAnd.And_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tableInGroup.And_IdColumn}, false);
        this.relationAnd_InGroup.Nested = true;
        this.Relations.Add(this.relationAnd_InGroup);
        this.relationexpression_InGroup = new global::System.Data.DataRelation("expression_InGroup", new global::System.Data.DataColumn[] {
                    this.tableexpression.expression_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tableInGroup.expression_IdColumn}, false);
        this.relationexpression_InGroup.Nested = true;
        this.Relations.Add(this.relationexpression_InGroup);
        this.relationNot_Or = new global::System.Data.DataRelation("Not_Or", new global::System.Data.DataColumn[] {
                    this.tableNot.Not_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tableOr.Not_IdColumn}, false);
        this.relationNot_Or.Nested = true;
        this.Relations.Add(this.relationNot_Or);
        this.relationAnd_Or = new global::System.Data.DataRelation("And_Or", new global::System.Data.DataColumn[] {
                    this.tableAnd.And_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tableOr.And_IdColumn}, false);
        this.relationAnd_Or.Nested = true;
        this.Relations.Add(this.relationAnd_Or);
        this.relationexpression_Or = new global::System.Data.DataRelation("expression_Or", new global::System.Data.DataColumn[] {
                    this.tableexpression.expression_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tableOr.expression_IdColumn}, false);
        this.relationexpression_Or.Nested = true;
        this.Relations.Add(this.relationexpression_Or);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    private bool ShouldSerializeSite() {
        return false;
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    private bool ShouldSerializerules() {
        return false;
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    private bool ShouldSerializegroup() {
        return false;
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    private bool ShouldSerializeexpression() {
        return false;
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    private bool ShouldSerializeAnd() {
        return false;
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    private bool ShouldSerializeEquals() {
        return false;
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    private bool ShouldSerializeNot() {
        return false;
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    private bool ShouldSerializeInGroup() {
        return false;
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    private bool ShouldSerializeOr() {
        return false;
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
        if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
            this.InitVars();
        }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
        NewDataSet ds = new NewDataSet();
        global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
        global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
        global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
        any.Namespace = ds.Namespace;
        sequence.Items.Add(any);
        type.Particle = sequence;
        global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
        if (xs.Contains(dsSchema.TargetNamespace)) {
            global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
            global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
            try {
                global::System.Xml.Schema.XmlSchema schema = null;
                dsSchema.Write(s1);
                for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                    schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                    s2.SetLength(0);
                    schema.Write(s2);
                    if ((s1.Length == s2.Length)) {
                        s1.Position = 0;
                        s2.Position = 0;
                        for (; ((s1.Position != s1.Length) 
                                    && (s1.ReadByte() == s2.ReadByte())); ) {
                            ;
                        }
                        if ((s1.Position == s1.Length)) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if ((s1 != null)) {
                    s1.Close();
                }
                if ((s2 != null)) {
                    s2.Close();
                }
            }
        }
        xs.Add(dsSchema);
        return type;
    }
    
    public delegate void SiteRowChangeEventHandler(object sender, SiteRowChangeEvent e);
    
    public delegate void rulesRowChangeEventHandler(object sender, rulesRowChangeEvent e);
    
    public delegate void groupRowChangeEventHandler(object sender, groupRowChangeEvent e);
    
    public delegate void expressionRowChangeEventHandler(object sender, expressionRowChangeEvent e);
    
    public delegate void AndRowChangeEventHandler(object sender, AndRowChangeEvent e);
    
    public delegate void EqualsRowChangeEventHandler(object sender, EqualsRowChangeEvent e);
    
    public delegate void NotRowChangeEventHandler(object sender, NotRowChangeEvent e);
    
    public delegate void InGroupRowChangeEventHandler(object sender, InGroupRowChangeEvent e);
    
    public delegate void OrRowChangeEventHandler(object sender, OrRowChangeEvent e);
    
    /// <summary>
    ///Represents the strongly named DataTable class.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
    public partial class SiteDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
        
        private global::System.Data.DataColumn columnsiteName;
        
        private global::System.Data.DataColumn columnruleEngine;
        
        private global::System.Data.DataColumn columnSite_Id;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public SiteDataTable() {
            this.TableName = "Site";
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal SiteDataTable(global::System.Data.DataTable table) {
            this.TableName = table.TableName;
            if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                this.CaseSensitive = table.CaseSensitive;
            }
            if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                this.Locale = table.Locale;
            }
            if ((table.Namespace != table.DataSet.Namespace)) {
                this.Namespace = table.Namespace;
            }
            this.Prefix = table.Prefix;
            this.MinimumCapacity = table.MinimumCapacity;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected SiteDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context) {
            this.InitVars();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn siteNameColumn {
            get {
                return this.columnsiteName;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn ruleEngineColumn {
            get {
                return this.columnruleEngine;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn Site_IdColumn {
            get {
                return this.columnSite_Id;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public int Count {
            get {
                return this.Rows.Count;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public SiteRow this[int index] {
            get {
                return ((SiteRow)(this.Rows[index]));
            }
        }
        
        public event SiteRowChangeEventHandler SiteRowChanging;
        
        public event SiteRowChangeEventHandler SiteRowChanged;
        
        public event SiteRowChangeEventHandler SiteRowDeleting;
        
        public event SiteRowChangeEventHandler SiteRowDeleted;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void AddSiteRow(SiteRow row) {
            this.Rows.Add(row);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public SiteRow AddSiteRow(string siteName, string ruleEngine) {
            SiteRow rowSiteRow = ((SiteRow)(this.NewRow()));
            object[] columnValuesArray = new object[] {
                    siteName,
                    ruleEngine,
                    null};
            rowSiteRow.ItemArray = columnValuesArray;
            this.Rows.Add(rowSiteRow);
            return rowSiteRow;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual global::System.Collections.IEnumerator GetEnumerator() {
            return this.Rows.GetEnumerator();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataTable Clone() {
            SiteDataTable cln = ((SiteDataTable)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Data.DataTable CreateInstance() {
            return new SiteDataTable();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.columnsiteName = base.Columns["siteName"];
            this.columnruleEngine = base.Columns["ruleEngine"];
            this.columnSite_Id = base.Columns["Site_Id"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.columnsiteName = new global::System.Data.DataColumn("siteName", typeof(string), null, global::System.Data.MappingType.Attribute);
            base.Columns.Add(this.columnsiteName);
            this.columnruleEngine = new global::System.Data.DataColumn("ruleEngine", typeof(string), null, global::System.Data.MappingType.Attribute);
            base.Columns.Add(this.columnruleEngine);
            this.columnSite_Id = new global::System.Data.DataColumn("Site_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
            base.Columns.Add(this.columnSite_Id);
            this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                            this.columnSite_Id}, true));
            this.columnsiteName.Namespace = "";
            this.columnruleEngine.Namespace = "";
            this.columnSite_Id.AutoIncrement = true;
            this.columnSite_Id.AllowDBNull = false;
            this.columnSite_Id.Unique = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public SiteRow NewSiteRow() {
            return ((SiteRow)(this.NewRow()));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
            return new SiteRow(builder);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Type GetRowType() {
            return typeof(SiteRow);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanged(e);
            if ((this.SiteRowChanged != null)) {
                this.SiteRowChanged(this, new SiteRowChangeEvent(((SiteRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanging(e);
            if ((this.SiteRowChanging != null)) {
                this.SiteRowChanging(this, new SiteRowChangeEvent(((SiteRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleted(e);
            if ((this.SiteRowDeleted != null)) {
                this.SiteRowDeleted(this, new SiteRowChangeEvent(((SiteRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleting(e);
            if ((this.SiteRowDeleting != null)) {
                this.SiteRowDeleting(this, new SiteRowChangeEvent(((SiteRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void RemoveSiteRow(SiteRow row) {
            this.Rows.Remove(row);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            NewDataSet ds = new NewDataSet();
            global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
            any1.Namespace = "http://www.w3.org/2001/XMLSchema";
            any1.MinOccurs = new decimal(0);
            any1.MaxOccurs = decimal.MaxValue;
            any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any1);
            global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
            any2.MinOccurs = new decimal(1);
            any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any2);
            global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
            attribute1.Name = "namespace";
            attribute1.FixedValue = ds.Namespace;
            type.Attributes.Add(attribute1);
            global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
            attribute2.Name = "tableTypeName";
            attribute2.FixedValue = "SiteDataTable";
            type.Attributes.Add(attribute2);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
    }
    
    /// <summary>
    ///Represents the strongly named DataTable class.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
    public partial class rulesDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
        
        private global::System.Data.DataColumn columnruleName;
        
        private global::System.Data.DataColumn columnruleID;
        
        private global::System.Data.DataColumn columnrules_Id;
        
        private global::System.Data.DataColumn columnSite_Id;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public rulesDataTable() {
            this.TableName = "rules";
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal rulesDataTable(global::System.Data.DataTable table) {
            this.TableName = table.TableName;
            if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                this.CaseSensitive = table.CaseSensitive;
            }
            if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                this.Locale = table.Locale;
            }
            if ((table.Namespace != table.DataSet.Namespace)) {
                this.Namespace = table.Namespace;
            }
            this.Prefix = table.Prefix;
            this.MinimumCapacity = table.MinimumCapacity;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected rulesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context) {
            this.InitVars();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn ruleNameColumn {
            get {
                return this.columnruleName;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn ruleIDColumn {
            get {
                return this.columnruleID;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn rules_IdColumn {
            get {
                return this.columnrules_Id;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn Site_IdColumn {
            get {
                return this.columnSite_Id;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public int Count {
            get {
                return this.Rows.Count;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public rulesRow this[int index] {
            get {
                return ((rulesRow)(this.Rows[index]));
            }
        }
        
        public event rulesRowChangeEventHandler rulesRowChanging;
        
        public event rulesRowChangeEventHandler rulesRowChanged;
        
        public event rulesRowChangeEventHandler rulesRowDeleting;
        
        public event rulesRowChangeEventHandler rulesRowDeleted;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void AddrulesRow(rulesRow row) {
            this.Rows.Add(row);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public rulesRow AddrulesRow(string ruleName, string ruleID, SiteRow parentSiteRowBySite_rules) {
            rulesRow rowrulesRow = ((rulesRow)(this.NewRow()));
            object[] columnValuesArray = new object[] {
                    ruleName,
                    ruleID,
                    null,
                    null};
            if ((parentSiteRowBySite_rules != null)) {
                columnValuesArray[3] = parentSiteRowBySite_rules[2];
            }
            rowrulesRow.ItemArray = columnValuesArray;
            this.Rows.Add(rowrulesRow);
            return rowrulesRow;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual global::System.Collections.IEnumerator GetEnumerator() {
            return this.Rows.GetEnumerator();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataTable Clone() {
            rulesDataTable cln = ((rulesDataTable)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Data.DataTable CreateInstance() {
            return new rulesDataTable();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.columnruleName = base.Columns["ruleName"];
            this.columnruleID = base.Columns["ruleID"];
            this.columnrules_Id = base.Columns["rules_Id"];
            this.columnSite_Id = base.Columns["Site_Id"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.columnruleName = new global::System.Data.DataColumn("ruleName", typeof(string), null, global::System.Data.MappingType.Attribute);
            base.Columns.Add(this.columnruleName);
            this.columnruleID = new global::System.Data.DataColumn("ruleID", typeof(string), null, global::System.Data.MappingType.Attribute);
            base.Columns.Add(this.columnruleID);
            this.columnrules_Id = new global::System.Data.DataColumn("rules_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
            base.Columns.Add(this.columnrules_Id);
            this.columnSite_Id = new global::System.Data.DataColumn("Site_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
            base.Columns.Add(this.columnSite_Id);
            this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                            this.columnrules_Id}, true));
            this.columnruleName.Namespace = "";
            this.columnruleID.Namespace = "";
            this.columnrules_Id.AutoIncrement = true;
            this.columnrules_Id.AllowDBNull = false;
            this.columnrules_Id.Unique = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public rulesRow NewrulesRow() {
            return ((rulesRow)(this.NewRow()));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
            return new rulesRow(builder);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Type GetRowType() {
            return typeof(rulesRow);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanged(e);
            if ((this.rulesRowChanged != null)) {
                this.rulesRowChanged(this, new rulesRowChangeEvent(((rulesRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanging(e);
            if ((this.rulesRowChanging != null)) {
                this.rulesRowChanging(this, new rulesRowChangeEvent(((rulesRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleted(e);
            if ((this.rulesRowDeleted != null)) {
                this.rulesRowDeleted(this, new rulesRowChangeEvent(((rulesRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleting(e);
            if ((this.rulesRowDeleting != null)) {
                this.rulesRowDeleting(this, new rulesRowChangeEvent(((rulesRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void RemoverulesRow(rulesRow row) {
            this.Rows.Remove(row);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            NewDataSet ds = new NewDataSet();
            global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
            any1.Namespace = "http://www.w3.org/2001/XMLSchema";
            any1.MinOccurs = new decimal(0);
            any1.MaxOccurs = decimal.MaxValue;
            any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any1);
            global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
            any2.MinOccurs = new decimal(1);
            any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any2);
            global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
            attribute1.Name = "namespace";
            attribute1.FixedValue = ds.Namespace;
            type.Attributes.Add(attribute1);
            global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
            attribute2.Name = "tableTypeName";
            attribute2.FixedValue = "rulesDataTable";
            type.Attributes.Add(attribute2);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
    }
    
    /// <summary>
    ///Represents the strongly named DataTable class.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
    public partial class groupDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
        
        private global::System.Data.DataColumn columngroupName;
        
        private global::System.Data.DataColumn columngroupID;
        
        private global::System.Data.DataColumn columngroup_text;
        
        private global::System.Data.DataColumn columnrules_Id;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public groupDataTable() {
            this.TableName = "group";
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal groupDataTable(global::System.Data.DataTable table) {
            this.TableName = table.TableName;
            if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                this.CaseSensitive = table.CaseSensitive;
            }
            if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                this.Locale = table.Locale;
            }
            if ((table.Namespace != table.DataSet.Namespace)) {
                this.Namespace = table.Namespace;
            }
            this.Prefix = table.Prefix;
            this.MinimumCapacity = table.MinimumCapacity;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected groupDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context) {
            this.InitVars();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn groupNameColumn {
            get {
                return this.columngroupName;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn groupIDColumn {
            get {
                return this.columngroupID;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn group_textColumn {
            get {
                return this.columngroup_text;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn rules_IdColumn {
            get {
                return this.columnrules_Id;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public int Count {
            get {
                return this.Rows.Count;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public groupRow this[int index] {
            get {
                return ((groupRow)(this.Rows[index]));
            }
        }
        
        public event groupRowChangeEventHandler groupRowChanging;
        
        public event groupRowChangeEventHandler groupRowChanged;
        
        public event groupRowChangeEventHandler groupRowDeleting;
        
        public event groupRowChangeEventHandler groupRowDeleted;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void AddgroupRow(groupRow row) {
            this.Rows.Add(row);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public groupRow AddgroupRow(string groupName, string groupID, string group_text, rulesRow parentrulesRowByrules_group) {
            groupRow rowgroupRow = ((groupRow)(this.NewRow()));
            object[] columnValuesArray = new object[] {
                    groupName,
                    groupID,
                    group_text,
                    null};
            if ((parentrulesRowByrules_group != null)) {
                columnValuesArray[3] = parentrulesRowByrules_group[2];
            }
            rowgroupRow.ItemArray = columnValuesArray;
            this.Rows.Add(rowgroupRow);
            return rowgroupRow;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual global::System.Collections.IEnumerator GetEnumerator() {
            return this.Rows.GetEnumerator();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataTable Clone() {
            groupDataTable cln = ((groupDataTable)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Data.DataTable CreateInstance() {
            return new groupDataTable();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.columngroupName = base.Columns["groupName"];
            this.columngroupID = base.Columns["groupID"];
            this.columngroup_text = base.Columns["group_text"];
            this.columnrules_Id = base.Columns["rules_Id"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.columngroupName = new global::System.Data.DataColumn("groupName", typeof(string), null, global::System.Data.MappingType.Attribute);
            base.Columns.Add(this.columngroupName);
            this.columngroupID = new global::System.Data.DataColumn("groupID", typeof(string), null, global::System.Data.MappingType.Attribute);
            base.Columns.Add(this.columngroupID);
            this.columngroup_text = new global::System.Data.DataColumn("group_text", typeof(string), null, global::System.Data.MappingType.SimpleContent);
            base.Columns.Add(this.columngroup_text);
            this.columnrules_Id = new global::System.Data.DataColumn("rules_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
            base.Columns.Add(this.columnrules_Id);
            this.columngroupName.Namespace = "";
            this.columngroupID.Namespace = "";
            this.columngroup_text.AllowDBNull = false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public groupRow NewgroupRow() {
            return ((groupRow)(this.NewRow()));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
            return new groupRow(builder);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Type GetRowType() {
            return typeof(groupRow);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanged(e);
            if ((this.groupRowChanged != null)) {
                this.groupRowChanged(this, new groupRowChangeEvent(((groupRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanging(e);
            if ((this.groupRowChanging != null)) {
                this.groupRowChanging(this, new groupRowChangeEvent(((groupRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleted(e);
            if ((this.groupRowDeleted != null)) {
                this.groupRowDeleted(this, new groupRowChangeEvent(((groupRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleting(e);
            if ((this.groupRowDeleting != null)) {
                this.groupRowDeleting(this, new groupRowChangeEvent(((groupRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void RemovegroupRow(groupRow row) {
            this.Rows.Remove(row);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            NewDataSet ds = new NewDataSet();
            global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
            any1.Namespace = "http://www.w3.org/2001/XMLSchema";
            any1.MinOccurs = new decimal(0);
            any1.MaxOccurs = decimal.MaxValue;
            any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any1);
            global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
            any2.MinOccurs = new decimal(1);
            any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any2);
            global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
            attribute1.Name = "namespace";
            attribute1.FixedValue = ds.Namespace;
            type.Attributes.Add(attribute1);
            global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
            attribute2.Name = "tableTypeName";
            attribute2.FixedValue = "groupDataTable";
            type.Attributes.Add(attribute2);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
    }
    
    /// <summary>
    ///Represents the strongly named DataTable class.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
    public partial class expressionDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
        
        private global::System.Data.DataColumn columnexpression_Id;
        
        private global::System.Data.DataColumn columnrules_Id;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public expressionDataTable() {
            this.TableName = "expression";
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal expressionDataTable(global::System.Data.DataTable table) {
            this.TableName = table.TableName;
            if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                this.CaseSensitive = table.CaseSensitive;
            }
            if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                this.Locale = table.Locale;
            }
            if ((table.Namespace != table.DataSet.Namespace)) {
                this.Namespace = table.Namespace;
            }
            this.Prefix = table.Prefix;
            this.MinimumCapacity = table.MinimumCapacity;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected expressionDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context) {
            this.InitVars();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn expression_IdColumn {
            get {
                return this.columnexpression_Id;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn rules_IdColumn {
            get {
                return this.columnrules_Id;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public int Count {
            get {
                return this.Rows.Count;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public expressionRow this[int index] {
            get {
                return ((expressionRow)(this.Rows[index]));
            }
        }
        
        public event expressionRowChangeEventHandler expressionRowChanging;
        
        public event expressionRowChangeEventHandler expressionRowChanged;
        
        public event expressionRowChangeEventHandler expressionRowDeleting;
        
        public event expressionRowChangeEventHandler expressionRowDeleted;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void AddexpressionRow(expressionRow row) {
            this.Rows.Add(row);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public expressionRow AddexpressionRow(rulesRow parentrulesRowByrules_expression) {
            expressionRow rowexpressionRow = ((expressionRow)(this.NewRow()));
            object[] columnValuesArray = new object[] {
                    null,
                    null};
            if ((parentrulesRowByrules_expression != null)) {
                columnValuesArray[1] = parentrulesRowByrules_expression[2];
            }
            rowexpressionRow.ItemArray = columnValuesArray;
            this.Rows.Add(rowexpressionRow);
            return rowexpressionRow;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual global::System.Collections.IEnumerator GetEnumerator() {
            return this.Rows.GetEnumerator();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataTable Clone() {
            expressionDataTable cln = ((expressionDataTable)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Data.DataTable CreateInstance() {
            return new expressionDataTable();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.columnexpression_Id = base.Columns["expression_Id"];
            this.columnrules_Id = base.Columns["rules_Id"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.columnexpression_Id = new global::System.Data.DataColumn("expression_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
            base.Columns.Add(this.columnexpression_Id);
            this.columnrules_Id = new global::System.Data.DataColumn("rules_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
            base.Columns.Add(this.columnrules_Id);
            this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                            this.columnexpression_Id}, true));
            this.columnexpression_Id.AutoIncrement = true;
            this.columnexpression_Id.AllowDBNull = false;
            this.columnexpression_Id.Unique = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public expressionRow NewexpressionRow() {
            return ((expressionRow)(this.NewRow()));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
            return new expressionRow(builder);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Type GetRowType() {
            return typeof(expressionRow);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanged(e);
            if ((this.expressionRowChanged != null)) {
                this.expressionRowChanged(this, new expressionRowChangeEvent(((expressionRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanging(e);
            if ((this.expressionRowChanging != null)) {
                this.expressionRowChanging(this, new expressionRowChangeEvent(((expressionRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleted(e);
            if ((this.expressionRowDeleted != null)) {
                this.expressionRowDeleted(this, new expressionRowChangeEvent(((expressionRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleting(e);
            if ((this.expressionRowDeleting != null)) {
                this.expressionRowDeleting(this, new expressionRowChangeEvent(((expressionRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void RemoveexpressionRow(expressionRow row) {
            this.Rows.Remove(row);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            NewDataSet ds = new NewDataSet();
            global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
            any1.Namespace = "http://www.w3.org/2001/XMLSchema";
            any1.MinOccurs = new decimal(0);
            any1.MaxOccurs = decimal.MaxValue;
            any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any1);
            global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
            any2.MinOccurs = new decimal(1);
            any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any2);
            global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
            attribute1.Name = "namespace";
            attribute1.FixedValue = ds.Namespace;
            type.Attributes.Add(attribute1);
            global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
            attribute2.Name = "tableTypeName";
            attribute2.FixedValue = "expressionDataTable";
            type.Attributes.Add(attribute2);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
    }
    
    /// <summary>
    ///Represents the strongly named DataTable class.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
    public partial class AndDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
        
        private global::System.Data.DataColumn columnAnd_Id;
        
        private global::System.Data.DataColumn columnexpression_Id;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public AndDataTable() {
            this.TableName = "And";
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal AndDataTable(global::System.Data.DataTable table) {
            this.TableName = table.TableName;
            if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                this.CaseSensitive = table.CaseSensitive;
            }
            if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                this.Locale = table.Locale;
            }
            if ((table.Namespace != table.DataSet.Namespace)) {
                this.Namespace = table.Namespace;
            }
            this.Prefix = table.Prefix;
            this.MinimumCapacity = table.MinimumCapacity;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected AndDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context) {
            this.InitVars();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn And_IdColumn {
            get {
                return this.columnAnd_Id;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn expression_IdColumn {
            get {
                return this.columnexpression_Id;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public int Count {
            get {
                return this.Rows.Count;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public AndRow this[int index] {
            get {
                return ((AndRow)(this.Rows[index]));
            }
        }
        
        public event AndRowChangeEventHandler AndRowChanging;
        
        public event AndRowChangeEventHandler AndRowChanged;
        
        public event AndRowChangeEventHandler AndRowDeleting;
        
        public event AndRowChangeEventHandler AndRowDeleted;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void AddAndRow(AndRow row) {
            this.Rows.Add(row);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public AndRow AddAndRow(expressionRow parentexpressionRowByexpression_And) {
            AndRow rowAndRow = ((AndRow)(this.NewRow()));
            object[] columnValuesArray = new object[] {
                    null,
                    null};
            if ((parentexpressionRowByexpression_And != null)) {
                columnValuesArray[1] = parentexpressionRowByexpression_And[0];
            }
            rowAndRow.ItemArray = columnValuesArray;
            this.Rows.Add(rowAndRow);
            return rowAndRow;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual global::System.Collections.IEnumerator GetEnumerator() {
            return this.Rows.GetEnumerator();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataTable Clone() {
            AndDataTable cln = ((AndDataTable)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Data.DataTable CreateInstance() {
            return new AndDataTable();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.columnAnd_Id = base.Columns["And_Id"];
            this.columnexpression_Id = base.Columns["expression_Id"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.columnAnd_Id = new global::System.Data.DataColumn("And_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
            base.Columns.Add(this.columnAnd_Id);
            this.columnexpression_Id = new global::System.Data.DataColumn("expression_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
            base.Columns.Add(this.columnexpression_Id);
            this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                            this.columnAnd_Id}, true));
            this.columnAnd_Id.AutoIncrement = true;
            this.columnAnd_Id.AllowDBNull = false;
            this.columnAnd_Id.Unique = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public AndRow NewAndRow() {
            return ((AndRow)(this.NewRow()));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
            return new AndRow(builder);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Type GetRowType() {
            return typeof(AndRow);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanged(e);
            if ((this.AndRowChanged != null)) {
                this.AndRowChanged(this, new AndRowChangeEvent(((AndRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanging(e);
            if ((this.AndRowChanging != null)) {
                this.AndRowChanging(this, new AndRowChangeEvent(((AndRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleted(e);
            if ((this.AndRowDeleted != null)) {
                this.AndRowDeleted(this, new AndRowChangeEvent(((AndRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleting(e);
            if ((this.AndRowDeleting != null)) {
                this.AndRowDeleting(this, new AndRowChangeEvent(((AndRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void RemoveAndRow(AndRow row) {
            this.Rows.Remove(row);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            NewDataSet ds = new NewDataSet();
            global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
            any1.Namespace = "http://www.w3.org/2001/XMLSchema";
            any1.MinOccurs = new decimal(0);
            any1.MaxOccurs = decimal.MaxValue;
            any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any1);
            global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
            any2.MinOccurs = new decimal(1);
            any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any2);
            global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
            attribute1.Name = "namespace";
            attribute1.FixedValue = ds.Namespace;
            type.Attributes.Add(attribute1);
            global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
            attribute2.Name = "tableTypeName";
            attribute2.FixedValue = "AndDataTable";
            type.Attributes.Add(attribute2);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
    }
    
    /// <summary>
    ///Represents the strongly named DataTable class.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
    public partial class EqualsDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
        
        private global::System.Data.DataColumn columnattributeValue;
        
        private global::System.Data.DataColumn columnattribute;
        
        private global::System.Data.DataColumn columnEquals_text;
        
        private global::System.Data.DataColumn columnOr_Id;
        
        private global::System.Data.DataColumn columnNot_Id;
        
        private global::System.Data.DataColumn columnAnd_Id;
        
        private global::System.Data.DataColumn columnexpression_Id;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public EqualsDataTable() {
            this.TableName = "Equals";
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal EqualsDataTable(global::System.Data.DataTable table) {
            this.TableName = table.TableName;
            if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                this.CaseSensitive = table.CaseSensitive;
            }
            if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                this.Locale = table.Locale;
            }
            if ((table.Namespace != table.DataSet.Namespace)) {
                this.Namespace = table.Namespace;
            }
            this.Prefix = table.Prefix;
            this.MinimumCapacity = table.MinimumCapacity;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected EqualsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context) {
            this.InitVars();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn attributeValueColumn {
            get {
                return this.columnattributeValue;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn attributeColumn {
            get {
                return this.columnattribute;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn Equals_textColumn {
            get {
                return this.columnEquals_text;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn Or_IdColumn {
            get {
                return this.columnOr_Id;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn Not_IdColumn {
            get {
                return this.columnNot_Id;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn And_IdColumn {
            get {
                return this.columnAnd_Id;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn expression_IdColumn {
            get {
                return this.columnexpression_Id;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public int Count {
            get {
                return this.Rows.Count;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public EqualsRow this[int index] {
            get {
                return ((EqualsRow)(this.Rows[index]));
            }
        }
        
        public event EqualsRowChangeEventHandler EqualsRowChanging;
        
        public event EqualsRowChangeEventHandler EqualsRowChanged;
        
        public event EqualsRowChangeEventHandler EqualsRowDeleting;
        
        public event EqualsRowChangeEventHandler EqualsRowDeleted;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void AddEqualsRow(EqualsRow row) {
            this.Rows.Add(row);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public EqualsRow AddEqualsRow(string attributeValue, string attribute, string Equals_text, OrRow parentOrRowByOr_Equals, NotRow parentNotRowByNot_Equals, AndRow parentAndRowByAnd_Equals, expressionRow parentexpressionRowByexpression_Equals) {
            EqualsRow rowEqualsRow = ((EqualsRow)(this.NewRow()));
            object[] columnValuesArray = new object[] {
                    attributeValue,
                    attribute,
                    Equals_text,
                    null,
                    null,
                    null,
                    null};
            if ((parentOrRowByOr_Equals != null)) {
                columnValuesArray[3] = parentOrRowByOr_Equals[0];
            }
            if ((parentNotRowByNot_Equals != null)) {
                columnValuesArray[4] = parentNotRowByNot_Equals[2];
            }
            if ((parentAndRowByAnd_Equals != null)) {
                columnValuesArray[5] = parentAndRowByAnd_Equals[0];
            }
            if ((parentexpressionRowByexpression_Equals != null)) {
                columnValuesArray[6] = parentexpressionRowByexpression_Equals[0];
            }
            rowEqualsRow.ItemArray = columnValuesArray;
            this.Rows.Add(rowEqualsRow);
            return rowEqualsRow;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual global::System.Collections.IEnumerator GetEnumerator() {
            return this.Rows.GetEnumerator();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataTable Clone() {
            EqualsDataTable cln = ((EqualsDataTable)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Data.DataTable CreateInstance() {
            return new EqualsDataTable();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.columnattributeValue = base.Columns["attributeValue"];
            this.columnattribute = base.Columns["attribute"];
            this.columnEquals_text = base.Columns["Equals_text"];
            this.columnOr_Id = base.Columns["Or_Id"];
            this.columnNot_Id = base.Columns["Not_Id"];
            this.columnAnd_Id = base.Columns["And_Id"];
            this.columnexpression_Id = base.Columns["expression_Id"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.columnattributeValue = new global::System.Data.DataColumn("attributeValue", typeof(string), null, global::System.Data.MappingType.Attribute);
            base.Columns.Add(this.columnattributeValue);
            this.columnattribute = new global::System.Data.DataColumn("attribute", typeof(string), null, global::System.Data.MappingType.Attribute);
            base.Columns.Add(this.columnattribute);
            this.columnEquals_text = new global::System.Data.DataColumn("Equals_text", typeof(string), null, global::System.Data.MappingType.SimpleContent);
            base.Columns.Add(this.columnEquals_text);
            this.columnOr_Id = new global::System.Data.DataColumn("Or_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
            base.Columns.Add(this.columnOr_Id);
            this.columnNot_Id = new global::System.Data.DataColumn("Not_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
            base.Columns.Add(this.columnNot_Id);
            this.columnAnd_Id = new global::System.Data.DataColumn("And_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
            base.Columns.Add(this.columnAnd_Id);
            this.columnexpression_Id = new global::System.Data.DataColumn("expression_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
            base.Columns.Add(this.columnexpression_Id);
            this.columnattributeValue.Namespace = "";
            this.columnattribute.Namespace = "";
            this.columnEquals_text.AllowDBNull = false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public EqualsRow NewEqualsRow() {
            return ((EqualsRow)(this.NewRow()));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
            return new EqualsRow(builder);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Type GetRowType() {
            return typeof(EqualsRow);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanged(e);
            if ((this.EqualsRowChanged != null)) {
                this.EqualsRowChanged(this, new EqualsRowChangeEvent(((EqualsRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanging(e);
            if ((this.EqualsRowChanging != null)) {
                this.EqualsRowChanging(this, new EqualsRowChangeEvent(((EqualsRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleted(e);
            if ((this.EqualsRowDeleted != null)) {
                this.EqualsRowDeleted(this, new EqualsRowChangeEvent(((EqualsRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleting(e);
            if ((this.EqualsRowDeleting != null)) {
                this.EqualsRowDeleting(this, new EqualsRowChangeEvent(((EqualsRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void RemoveEqualsRow(EqualsRow row) {
            this.Rows.Remove(row);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            NewDataSet ds = new NewDataSet();
            global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
            any1.Namespace = "http://www.w3.org/2001/XMLSchema";
            any1.MinOccurs = new decimal(0);
            any1.MaxOccurs = decimal.MaxValue;
            any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any1);
            global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
            any2.MinOccurs = new decimal(1);
            any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any2);
            global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
            attribute1.Name = "namespace";
            attribute1.FixedValue = ds.Namespace;
            type.Attributes.Add(attribute1);
            global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
            attribute2.Name = "tableTypeName";
            attribute2.FixedValue = "EqualsDataTable";
            type.Attributes.Add(attribute2);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
    }
    
    /// <summary>
    ///Represents the strongly named DataTable class.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
    public partial class NotDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
        
        private global::System.Data.DataColumn columnattributeValue;
        
        private global::System.Data.DataColumn columnattribute;
        
        private global::System.Data.DataColumn columnNot_Id;
        
        private global::System.Data.DataColumn columnAnd_Id;
        
        private global::System.Data.DataColumn columnexpression_Id;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public NotDataTable() {
            this.TableName = "Not";
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal NotDataTable(global::System.Data.DataTable table) {
            this.TableName = table.TableName;
            if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                this.CaseSensitive = table.CaseSensitive;
            }
            if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                this.Locale = table.Locale;
            }
            if ((table.Namespace != table.DataSet.Namespace)) {
                this.Namespace = table.Namespace;
            }
            this.Prefix = table.Prefix;
            this.MinimumCapacity = table.MinimumCapacity;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected NotDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context) {
            this.InitVars();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn attributeValueColumn {
            get {
                return this.columnattributeValue;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn attributeColumn {
            get {
                return this.columnattribute;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn Not_IdColumn {
            get {
                return this.columnNot_Id;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn And_IdColumn {
            get {
                return this.columnAnd_Id;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn expression_IdColumn {
            get {
                return this.columnexpression_Id;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public int Count {
            get {
                return this.Rows.Count;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public NotRow this[int index] {
            get {
                return ((NotRow)(this.Rows[index]));
            }
        }
        
        public event NotRowChangeEventHandler NotRowChanging;
        
        public event NotRowChangeEventHandler NotRowChanged;
        
        public event NotRowChangeEventHandler NotRowDeleting;
        
        public event NotRowChangeEventHandler NotRowDeleted;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void AddNotRow(NotRow row) {
            this.Rows.Add(row);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public NotRow AddNotRow(string attributeValue, string attribute, AndRow parentAndRowByAnd_Not, expressionRow parentexpressionRowByexpression_Not) {
            NotRow rowNotRow = ((NotRow)(this.NewRow()));
            object[] columnValuesArray = new object[] {
                    attributeValue,
                    attribute,
                    null,
                    null,
                    null};
            if ((parentAndRowByAnd_Not != null)) {
                columnValuesArray[3] = parentAndRowByAnd_Not[0];
            }
            if ((parentexpressionRowByexpression_Not != null)) {
                columnValuesArray[4] = parentexpressionRowByexpression_Not[0];
            }
            rowNotRow.ItemArray = columnValuesArray;
            this.Rows.Add(rowNotRow);
            return rowNotRow;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual global::System.Collections.IEnumerator GetEnumerator() {
            return this.Rows.GetEnumerator();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataTable Clone() {
            NotDataTable cln = ((NotDataTable)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Data.DataTable CreateInstance() {
            return new NotDataTable();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.columnattributeValue = base.Columns["attributeValue"];
            this.columnattribute = base.Columns["attribute"];
            this.columnNot_Id = base.Columns["Not_Id"];
            this.columnAnd_Id = base.Columns["And_Id"];
            this.columnexpression_Id = base.Columns["expression_Id"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.columnattributeValue = new global::System.Data.DataColumn("attributeValue", typeof(string), null, global::System.Data.MappingType.Attribute);
            base.Columns.Add(this.columnattributeValue);
            this.columnattribute = new global::System.Data.DataColumn("attribute", typeof(string), null, global::System.Data.MappingType.Attribute);
            base.Columns.Add(this.columnattribute);
            this.columnNot_Id = new global::System.Data.DataColumn("Not_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
            base.Columns.Add(this.columnNot_Id);
            this.columnAnd_Id = new global::System.Data.DataColumn("And_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
            base.Columns.Add(this.columnAnd_Id);
            this.columnexpression_Id = new global::System.Data.DataColumn("expression_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
            base.Columns.Add(this.columnexpression_Id);
            this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                            this.columnNot_Id}, true));
            this.columnattributeValue.Namespace = "";
            this.columnattribute.Namespace = "";
            this.columnNot_Id.AutoIncrement = true;
            this.columnNot_Id.AllowDBNull = false;
            this.columnNot_Id.Unique = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public NotRow NewNotRow() {
            return ((NotRow)(this.NewRow()));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
            return new NotRow(builder);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Type GetRowType() {
            return typeof(NotRow);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanged(e);
            if ((this.NotRowChanged != null)) {
                this.NotRowChanged(this, new NotRowChangeEvent(((NotRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanging(e);
            if ((this.NotRowChanging != null)) {
                this.NotRowChanging(this, new NotRowChangeEvent(((NotRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleted(e);
            if ((this.NotRowDeleted != null)) {
                this.NotRowDeleted(this, new NotRowChangeEvent(((NotRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleting(e);
            if ((this.NotRowDeleting != null)) {
                this.NotRowDeleting(this, new NotRowChangeEvent(((NotRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void RemoveNotRow(NotRow row) {
            this.Rows.Remove(row);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            NewDataSet ds = new NewDataSet();
            global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
            any1.Namespace = "http://www.w3.org/2001/XMLSchema";
            any1.MinOccurs = new decimal(0);
            any1.MaxOccurs = decimal.MaxValue;
            any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any1);
            global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
            any2.MinOccurs = new decimal(1);
            any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any2);
            global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
            attribute1.Name = "namespace";
            attribute1.FixedValue = ds.Namespace;
            type.Attributes.Add(attribute1);
            global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
            attribute2.Name = "tableTypeName";
            attribute2.FixedValue = "NotDataTable";
            type.Attributes.Add(attribute2);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
    }
    
    /// <summary>
    ///Represents the strongly named DataTable class.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
    public partial class InGroupDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
        
        private global::System.Data.DataColumn columnvalue;
        
        private global::System.Data.DataColumn columnInGroup_text;
        
        private global::System.Data.DataColumn columnNot_Id;
        
        private global::System.Data.DataColumn columnAnd_Id;
        
        private global::System.Data.DataColumn columnexpression_Id;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public InGroupDataTable() {
            this.TableName = "InGroup";
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal InGroupDataTable(global::System.Data.DataTable table) {
            this.TableName = table.TableName;
            if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                this.CaseSensitive = table.CaseSensitive;
            }
            if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                this.Locale = table.Locale;
            }
            if ((table.Namespace != table.DataSet.Namespace)) {
                this.Namespace = table.Namespace;
            }
            this.Prefix = table.Prefix;
            this.MinimumCapacity = table.MinimumCapacity;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected InGroupDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context) {
            this.InitVars();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn valueColumn {
            get {
                return this.columnvalue;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn InGroup_textColumn {
            get {
                return this.columnInGroup_text;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn Not_IdColumn {
            get {
                return this.columnNot_Id;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn And_IdColumn {
            get {
                return this.columnAnd_Id;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn expression_IdColumn {
            get {
                return this.columnexpression_Id;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public int Count {
            get {
                return this.Rows.Count;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public InGroupRow this[int index] {
            get {
                return ((InGroupRow)(this.Rows[index]));
            }
        }
        
        public event InGroupRowChangeEventHandler InGroupRowChanging;
        
        public event InGroupRowChangeEventHandler InGroupRowChanged;
        
        public event InGroupRowChangeEventHandler InGroupRowDeleting;
        
        public event InGroupRowChangeEventHandler InGroupRowDeleted;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void AddInGroupRow(InGroupRow row) {
            this.Rows.Add(row);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public InGroupRow AddInGroupRow(string value, string InGroup_text, NotRow parentNotRowByNot_InGroup, AndRow parentAndRowByAnd_InGroup, expressionRow parentexpressionRowByexpression_InGroup) {
            InGroupRow rowInGroupRow = ((InGroupRow)(this.NewRow()));
            object[] columnValuesArray = new object[] {
                    value,
                    InGroup_text,
                    null,
                    null,
                    null};
            if ((parentNotRowByNot_InGroup != null)) {
                columnValuesArray[2] = parentNotRowByNot_InGroup[2];
            }
            if ((parentAndRowByAnd_InGroup != null)) {
                columnValuesArray[3] = parentAndRowByAnd_InGroup[0];
            }
            if ((parentexpressionRowByexpression_InGroup != null)) {
                columnValuesArray[4] = parentexpressionRowByexpression_InGroup[0];
            }
            rowInGroupRow.ItemArray = columnValuesArray;
            this.Rows.Add(rowInGroupRow);
            return rowInGroupRow;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual global::System.Collections.IEnumerator GetEnumerator() {
            return this.Rows.GetEnumerator();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataTable Clone() {
            InGroupDataTable cln = ((InGroupDataTable)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Data.DataTable CreateInstance() {
            return new InGroupDataTable();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.columnvalue = base.Columns["value"];
            this.columnInGroup_text = base.Columns["InGroup_text"];
            this.columnNot_Id = base.Columns["Not_Id"];
            this.columnAnd_Id = base.Columns["And_Id"];
            this.columnexpression_Id = base.Columns["expression_Id"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.columnvalue = new global::System.Data.DataColumn("value", typeof(string), null, global::System.Data.MappingType.Attribute);
            base.Columns.Add(this.columnvalue);
            this.columnInGroup_text = new global::System.Data.DataColumn("InGroup_text", typeof(string), null, global::System.Data.MappingType.SimpleContent);
            base.Columns.Add(this.columnInGroup_text);
            this.columnNot_Id = new global::System.Data.DataColumn("Not_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
            base.Columns.Add(this.columnNot_Id);
            this.columnAnd_Id = new global::System.Data.DataColumn("And_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
            base.Columns.Add(this.columnAnd_Id);
            this.columnexpression_Id = new global::System.Data.DataColumn("expression_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
            base.Columns.Add(this.columnexpression_Id);
            this.columnvalue.Namespace = "";
            this.columnInGroup_text.AllowDBNull = false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public InGroupRow NewInGroupRow() {
            return ((InGroupRow)(this.NewRow()));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
            return new InGroupRow(builder);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Type GetRowType() {
            return typeof(InGroupRow);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanged(e);
            if ((this.InGroupRowChanged != null)) {
                this.InGroupRowChanged(this, new InGroupRowChangeEvent(((InGroupRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanging(e);
            if ((this.InGroupRowChanging != null)) {
                this.InGroupRowChanging(this, new InGroupRowChangeEvent(((InGroupRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleted(e);
            if ((this.InGroupRowDeleted != null)) {
                this.InGroupRowDeleted(this, new InGroupRowChangeEvent(((InGroupRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleting(e);
            if ((this.InGroupRowDeleting != null)) {
                this.InGroupRowDeleting(this, new InGroupRowChangeEvent(((InGroupRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void RemoveInGroupRow(InGroupRow row) {
            this.Rows.Remove(row);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            NewDataSet ds = new NewDataSet();
            global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
            any1.Namespace = "http://www.w3.org/2001/XMLSchema";
            any1.MinOccurs = new decimal(0);
            any1.MaxOccurs = decimal.MaxValue;
            any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any1);
            global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
            any2.MinOccurs = new decimal(1);
            any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any2);
            global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
            attribute1.Name = "namespace";
            attribute1.FixedValue = ds.Namespace;
            type.Attributes.Add(attribute1);
            global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
            attribute2.Name = "tableTypeName";
            attribute2.FixedValue = "InGroupDataTable";
            type.Attributes.Add(attribute2);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
    }
    
    /// <summary>
    ///Represents the strongly named DataTable class.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
    public partial class OrDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
        
        private global::System.Data.DataColumn columnOr_Id;
        
        private global::System.Data.DataColumn columnNot_Id;
        
        private global::System.Data.DataColumn columnAnd_Id;
        
        private global::System.Data.DataColumn columnexpression_Id;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public OrDataTable() {
            this.TableName = "Or";
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal OrDataTable(global::System.Data.DataTable table) {
            this.TableName = table.TableName;
            if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                this.CaseSensitive = table.CaseSensitive;
            }
            if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                this.Locale = table.Locale;
            }
            if ((table.Namespace != table.DataSet.Namespace)) {
                this.Namespace = table.Namespace;
            }
            this.Prefix = table.Prefix;
            this.MinimumCapacity = table.MinimumCapacity;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected OrDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context) {
            this.InitVars();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn Or_IdColumn {
            get {
                return this.columnOr_Id;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn Not_IdColumn {
            get {
                return this.columnNot_Id;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn And_IdColumn {
            get {
                return this.columnAnd_Id;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn expression_IdColumn {
            get {
                return this.columnexpression_Id;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public int Count {
            get {
                return this.Rows.Count;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public OrRow this[int index] {
            get {
                return ((OrRow)(this.Rows[index]));
            }
        }
        
        public event OrRowChangeEventHandler OrRowChanging;
        
        public event OrRowChangeEventHandler OrRowChanged;
        
        public event OrRowChangeEventHandler OrRowDeleting;
        
        public event OrRowChangeEventHandler OrRowDeleted;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void AddOrRow(OrRow row) {
            this.Rows.Add(row);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public OrRow AddOrRow(NotRow parentNotRowByNot_Or, AndRow parentAndRowByAnd_Or, expressionRow parentexpressionRowByexpression_Or) {
            OrRow rowOrRow = ((OrRow)(this.NewRow()));
            object[] columnValuesArray = new object[] {
                    null,
                    null,
                    null,
                    null};
            if ((parentNotRowByNot_Or != null)) {
                columnValuesArray[1] = parentNotRowByNot_Or[2];
            }
            if ((parentAndRowByAnd_Or != null)) {
                columnValuesArray[2] = parentAndRowByAnd_Or[0];
            }
            if ((parentexpressionRowByexpression_Or != null)) {
                columnValuesArray[3] = parentexpressionRowByexpression_Or[0];
            }
            rowOrRow.ItemArray = columnValuesArray;
            this.Rows.Add(rowOrRow);
            return rowOrRow;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual global::System.Collections.IEnumerator GetEnumerator() {
            return this.Rows.GetEnumerator();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataTable Clone() {
            OrDataTable cln = ((OrDataTable)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Data.DataTable CreateInstance() {
            return new OrDataTable();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.columnOr_Id = base.Columns["Or_Id"];
            this.columnNot_Id = base.Columns["Not_Id"];
            this.columnAnd_Id = base.Columns["And_Id"];
            this.columnexpression_Id = base.Columns["expression_Id"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.columnOr_Id = new global::System.Data.DataColumn("Or_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
            base.Columns.Add(this.columnOr_Id);
            this.columnNot_Id = new global::System.Data.DataColumn("Not_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
            base.Columns.Add(this.columnNot_Id);
            this.columnAnd_Id = new global::System.Data.DataColumn("And_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
            base.Columns.Add(this.columnAnd_Id);
            this.columnexpression_Id = new global::System.Data.DataColumn("expression_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
            base.Columns.Add(this.columnexpression_Id);
            this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                            this.columnOr_Id}, true));
            this.columnOr_Id.AutoIncrement = true;
            this.columnOr_Id.AllowDBNull = false;
            this.columnOr_Id.Unique = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public OrRow NewOrRow() {
            return ((OrRow)(this.NewRow()));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
            return new OrRow(builder);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Type GetRowType() {
            return typeof(OrRow);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanged(e);
            if ((this.OrRowChanged != null)) {
                this.OrRowChanged(this, new OrRowChangeEvent(((OrRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanging(e);
            if ((this.OrRowChanging != null)) {
                this.OrRowChanging(this, new OrRowChangeEvent(((OrRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleted(e);
            if ((this.OrRowDeleted != null)) {
                this.OrRowDeleted(this, new OrRowChangeEvent(((OrRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleting(e);
            if ((this.OrRowDeleting != null)) {
                this.OrRowDeleting(this, new OrRowChangeEvent(((OrRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void RemoveOrRow(OrRow row) {
            this.Rows.Remove(row);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            NewDataSet ds = new NewDataSet();
            global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
            any1.Namespace = "http://www.w3.org/2001/XMLSchema";
            any1.MinOccurs = new decimal(0);
            any1.MaxOccurs = decimal.MaxValue;
            any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any1);
            global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
            any2.MinOccurs = new decimal(1);
            any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any2);
            global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
            attribute1.Name = "namespace";
            attribute1.FixedValue = ds.Namespace;
            type.Attributes.Add(attribute1);
            global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
            attribute2.Name = "tableTypeName";
            attribute2.FixedValue = "OrDataTable";
            type.Attributes.Add(attribute2);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
    }
    
    /// <summary>
    ///Represents strongly named DataRow class.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public partial class SiteRow : global::System.Data.DataRow {
        
        private SiteDataTable tableSite;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal SiteRow(global::System.Data.DataRowBuilder rb) : 
                base(rb) {
            this.tableSite = ((SiteDataTable)(this.Table));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string siteName {
            get {
                try {
                    return ((string)(this[this.tableSite.siteNameColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'siteName\' in table \'Site\' is DBNull.", e);
                }
            }
            set {
                this[this.tableSite.siteNameColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string ruleEngine {
            get {
                try {
                    return ((string)(this[this.tableSite.ruleEngineColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'ruleEngine\' in table \'Site\' is DBNull.", e);
                }
            }
            set {
                this[this.tableSite.ruleEngineColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public int Site_Id {
            get {
                return ((int)(this[this.tableSite.Site_IdColumn]));
            }
            set {
                this[this.tableSite.Site_IdColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IssiteNameNull() {
            return this.IsNull(this.tableSite.siteNameColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetsiteNameNull() {
            this[this.tableSite.siteNameColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IsruleEngineNull() {
            return this.IsNull(this.tableSite.ruleEngineColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetruleEngineNull() {
            this[this.tableSite.ruleEngineColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public rulesRow[] GetrulesRows() {
            if ((this.Table.ChildRelations["Site_rules"] == null)) {
                return new rulesRow[0];
            }
            else {
                return ((rulesRow[])(base.GetChildRows(this.Table.ChildRelations["Site_rules"])));
            }
        }
    }
    
    /// <summary>
    ///Represents strongly named DataRow class.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public partial class rulesRow : global::System.Data.DataRow {
        
        private rulesDataTable tablerules;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal rulesRow(global::System.Data.DataRowBuilder rb) : 
                base(rb) {
            this.tablerules = ((rulesDataTable)(this.Table));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string ruleName {
            get {
                try {
                    return ((string)(this[this.tablerules.ruleNameColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'ruleName\' in table \'rules\' is DBNull.", e);
                }
            }
            set {
                this[this.tablerules.ruleNameColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string ruleID {
            get {
                try {
                    return ((string)(this[this.tablerules.ruleIDColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'ruleID\' in table \'rules\' is DBNull.", e);
                }
            }
            set {
                this[this.tablerules.ruleIDColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public int rules_Id {
            get {
                return ((int)(this[this.tablerules.rules_IdColumn]));
            }
            set {
                this[this.tablerules.rules_IdColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public int Site_Id {
            get {
                try {
                    return ((int)(this[this.tablerules.Site_IdColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'Site_Id\' in table \'rules\' is DBNull.", e);
                }
            }
            set {
                this[this.tablerules.Site_IdColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public SiteRow SiteRow {
            get {
                return ((SiteRow)(this.GetParentRow(this.Table.ParentRelations["Site_rules"])));
            }
            set {
                this.SetParentRow(value, this.Table.ParentRelations["Site_rules"]);
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IsruleNameNull() {
            return this.IsNull(this.tablerules.ruleNameColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetruleNameNull() {
            this[this.tablerules.ruleNameColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IsruleIDNull() {
            return this.IsNull(this.tablerules.ruleIDColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetruleIDNull() {
            this[this.tablerules.ruleIDColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IsSite_IdNull() {
            return this.IsNull(this.tablerules.Site_IdColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetSite_IdNull() {
            this[this.tablerules.Site_IdColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public groupRow[] GetgroupRows() {
            if ((this.Table.ChildRelations["rules_group"] == null)) {
                return new groupRow[0];
            }
            else {
                return ((groupRow[])(base.GetChildRows(this.Table.ChildRelations["rules_group"])));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public expressionRow[] GetexpressionRows() {
            if ((this.Table.ChildRelations["rules_expression"] == null)) {
                return new expressionRow[0];
            }
            else {
                return ((expressionRow[])(base.GetChildRows(this.Table.ChildRelations["rules_expression"])));
            }
        }
    }
    
    /// <summary>
    ///Represents strongly named DataRow class.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public partial class groupRow : global::System.Data.DataRow {
        
        private groupDataTable tablegroup;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal groupRow(global::System.Data.DataRowBuilder rb) : 
                base(rb) {
            this.tablegroup = ((groupDataTable)(this.Table));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string groupName {
            get {
                try {
                    return ((string)(this[this.tablegroup.groupNameColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'groupName\' in table \'group\' is DBNull.", e);
                }
            }
            set {
                this[this.tablegroup.groupNameColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string groupID {
            get {
                try {
                    return ((string)(this[this.tablegroup.groupIDColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'groupID\' in table \'group\' is DBNull.", e);
                }
            }
            set {
                this[this.tablegroup.groupIDColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string group_text {
            get {
                return ((string)(this[this.tablegroup.group_textColumn]));
            }
            set {
                this[this.tablegroup.group_textColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public int rules_Id {
            get {
                try {
                    return ((int)(this[this.tablegroup.rules_IdColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'rules_Id\' in table \'group\' is DBNull.", e);
                }
            }
            set {
                this[this.tablegroup.rules_IdColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public rulesRow rulesRow {
            get {
                return ((rulesRow)(this.GetParentRow(this.Table.ParentRelations["rules_group"])));
            }
            set {
                this.SetParentRow(value, this.Table.ParentRelations["rules_group"]);
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IsgroupNameNull() {
            return this.IsNull(this.tablegroup.groupNameColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetgroupNameNull() {
            this[this.tablegroup.groupNameColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IsgroupIDNull() {
            return this.IsNull(this.tablegroup.groupIDColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetgroupIDNull() {
            this[this.tablegroup.groupIDColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool Isrules_IdNull() {
            return this.IsNull(this.tablegroup.rules_IdColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Setrules_IdNull() {
            this[this.tablegroup.rules_IdColumn] = global::System.Convert.DBNull;
        }
    }
    
    /// <summary>
    ///Represents strongly named DataRow class.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public partial class expressionRow : global::System.Data.DataRow {
        
        private expressionDataTable tableexpression;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal expressionRow(global::System.Data.DataRowBuilder rb) : 
                base(rb) {
            this.tableexpression = ((expressionDataTable)(this.Table));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public int expression_Id {
            get {
                return ((int)(this[this.tableexpression.expression_IdColumn]));
            }
            set {
                this[this.tableexpression.expression_IdColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public int rules_Id {
            get {
                try {
                    return ((int)(this[this.tableexpression.rules_IdColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'rules_Id\' in table \'expression\' is DBNull.", e);
                }
            }
            set {
                this[this.tableexpression.rules_IdColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public rulesRow rulesRow {
            get {
                return ((rulesRow)(this.GetParentRow(this.Table.ParentRelations["rules_expression"])));
            }
            set {
                this.SetParentRow(value, this.Table.ParentRelations["rules_expression"]);
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool Isrules_IdNull() {
            return this.IsNull(this.tableexpression.rules_IdColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Setrules_IdNull() {
            this[this.tableexpression.rules_IdColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public AndRow[] GetAndRows() {
            if ((this.Table.ChildRelations["expression_And"] == null)) {
                return new AndRow[0];
            }
            else {
                return ((AndRow[])(base.GetChildRows(this.Table.ChildRelations["expression_And"])));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public OrRow[] GetOrRows() {
            if ((this.Table.ChildRelations["expression_Or"] == null)) {
                return new OrRow[0];
            }
            else {
                return ((OrRow[])(base.GetChildRows(this.Table.ChildRelations["expression_Or"])));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public InGroupRow[] GetInGroupRows() {
            if ((this.Table.ChildRelations["expression_InGroup"] == null)) {
                return new InGroupRow[0];
            }
            else {
                return ((InGroupRow[])(base.GetChildRows(this.Table.ChildRelations["expression_InGroup"])));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public EqualsRow[] GetEqualsRows() {
            if ((this.Table.ChildRelations["expression_Equals"] == null)) {
                return new EqualsRow[0];
            }
            else {
                return ((EqualsRow[])(base.GetChildRows(this.Table.ChildRelations["expression_Equals"])));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public NotRow[] GetNotRows() {
            if ((this.Table.ChildRelations["expression_Not"] == null)) {
                return new NotRow[0];
            }
            else {
                return ((NotRow[])(base.GetChildRows(this.Table.ChildRelations["expression_Not"])));
            }
        }
    }
    
    /// <summary>
    ///Represents strongly named DataRow class.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public partial class AndRow : global::System.Data.DataRow {
        
        private AndDataTable tableAnd;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal AndRow(global::System.Data.DataRowBuilder rb) : 
                base(rb) {
            this.tableAnd = ((AndDataTable)(this.Table));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public int And_Id {
            get {
                return ((int)(this[this.tableAnd.And_IdColumn]));
            }
            set {
                this[this.tableAnd.And_IdColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public int expression_Id {
            get {
                try {
                    return ((int)(this[this.tableAnd.expression_IdColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'expression_Id\' in table \'And\' is DBNull.", e);
                }
            }
            set {
                this[this.tableAnd.expression_IdColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public expressionRow expressionRow {
            get {
                return ((expressionRow)(this.GetParentRow(this.Table.ParentRelations["expression_And"])));
            }
            set {
                this.SetParentRow(value, this.Table.ParentRelations["expression_And"]);
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool Isexpression_IdNull() {
            return this.IsNull(this.tableAnd.expression_IdColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Setexpression_IdNull() {
            this[this.tableAnd.expression_IdColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public EqualsRow[] GetEqualsRows() {
            if ((this.Table.ChildRelations["And_Equals"] == null)) {
                return new EqualsRow[0];
            }
            else {
                return ((EqualsRow[])(base.GetChildRows(this.Table.ChildRelations["And_Equals"])));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public NotRow[] GetNotRows() {
            if ((this.Table.ChildRelations["And_Not"] == null)) {
                return new NotRow[0];
            }
            else {
                return ((NotRow[])(base.GetChildRows(this.Table.ChildRelations["And_Not"])));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public OrRow[] GetOrRows() {
            if ((this.Table.ChildRelations["And_Or"] == null)) {
                return new OrRow[0];
            }
            else {
                return ((OrRow[])(base.GetChildRows(this.Table.ChildRelations["And_Or"])));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public InGroupRow[] GetInGroupRows() {
            if ((this.Table.ChildRelations["And_InGroup"] == null)) {
                return new InGroupRow[0];
            }
            else {
                return ((InGroupRow[])(base.GetChildRows(this.Table.ChildRelations["And_InGroup"])));
            }
        }
    }
    
    /// <summary>
    ///Represents strongly named DataRow class.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public partial class EqualsRow : global::System.Data.DataRow {
        
        private EqualsDataTable tableEquals;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal EqualsRow(global::System.Data.DataRowBuilder rb) : 
                base(rb) {
            this.tableEquals = ((EqualsDataTable)(this.Table));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string attributeValue {
            get {
                try {
                    return ((string)(this[this.tableEquals.attributeValueColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'attributeValue\' in table \'Equals\' is DBNull.", e);
                }
            }
            set {
                this[this.tableEquals.attributeValueColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string attribute {
            get {
                try {
                    return ((string)(this[this.tableEquals.attributeColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'attribute\' in table \'Equals\' is DBNull.", e);
                }
            }
            set {
                this[this.tableEquals.attributeColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string Equals_text {
            get {
                return ((string)(this[this.tableEquals.Equals_textColumn]));
            }
            set {
                this[this.tableEquals.Equals_textColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public int Or_Id {
            get {
                try {
                    return ((int)(this[this.tableEquals.Or_IdColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'Or_Id\' in table \'Equals\' is DBNull.", e);
                }
            }
            set {
                this[this.tableEquals.Or_IdColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public int Not_Id {
            get {
                try {
                    return ((int)(this[this.tableEquals.Not_IdColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'Not_Id\' in table \'Equals\' is DBNull.", e);
                }
            }
            set {
                this[this.tableEquals.Not_IdColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public int And_Id {
            get {
                try {
                    return ((int)(this[this.tableEquals.And_IdColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'And_Id\' in table \'Equals\' is DBNull.", e);
                }
            }
            set {
                this[this.tableEquals.And_IdColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public int expression_Id {
            get {
                try {
                    return ((int)(this[this.tableEquals.expression_IdColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'expression_Id\' in table \'Equals\' is DBNull.", e);
                }
            }
            set {
                this[this.tableEquals.expression_IdColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public OrRow OrRow {
            get {
                return ((OrRow)(this.GetParentRow(this.Table.ParentRelations["Or_Equals"])));
            }
            set {
                this.SetParentRow(value, this.Table.ParentRelations["Or_Equals"]);
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public NotRow NotRow {
            get {
                return ((NotRow)(this.GetParentRow(this.Table.ParentRelations["Not_Equals"])));
            }
            set {
                this.SetParentRow(value, this.Table.ParentRelations["Not_Equals"]);
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public AndRow AndRow {
            get {
                return ((AndRow)(this.GetParentRow(this.Table.ParentRelations["And_Equals"])));
            }
            set {
                this.SetParentRow(value, this.Table.ParentRelations["And_Equals"]);
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public expressionRow expressionRow {
            get {
                return ((expressionRow)(this.GetParentRow(this.Table.ParentRelations["expression_Equals"])));
            }
            set {
                this.SetParentRow(value, this.Table.ParentRelations["expression_Equals"]);
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IsattributeValueNull() {
            return this.IsNull(this.tableEquals.attributeValueColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetattributeValueNull() {
            this[this.tableEquals.attributeValueColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IsattributeNull() {
            return this.IsNull(this.tableEquals.attributeColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetattributeNull() {
            this[this.tableEquals.attributeColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IsOr_IdNull() {
            return this.IsNull(this.tableEquals.Or_IdColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetOr_IdNull() {
            this[this.tableEquals.Or_IdColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IsNot_IdNull() {
            return this.IsNull(this.tableEquals.Not_IdColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetNot_IdNull() {
            this[this.tableEquals.Not_IdColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IsAnd_IdNull() {
            return this.IsNull(this.tableEquals.And_IdColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetAnd_IdNull() {
            this[this.tableEquals.And_IdColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool Isexpression_IdNull() {
            return this.IsNull(this.tableEquals.expression_IdColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Setexpression_IdNull() {
            this[this.tableEquals.expression_IdColumn] = global::System.Convert.DBNull;
        }
    }
    
    /// <summary>
    ///Represents strongly named DataRow class.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public partial class NotRow : global::System.Data.DataRow {
        
        private NotDataTable tableNot;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal NotRow(global::System.Data.DataRowBuilder rb) : 
                base(rb) {
            this.tableNot = ((NotDataTable)(this.Table));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string attributeValue {
            get {
                try {
                    return ((string)(this[this.tableNot.attributeValueColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'attributeValue\' in table \'Not\' is DBNull.", e);
                }
            }
            set {
                this[this.tableNot.attributeValueColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string attribute {
            get {
                try {
                    return ((string)(this[this.tableNot.attributeColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'attribute\' in table \'Not\' is DBNull.", e);
                }
            }
            set {
                this[this.tableNot.attributeColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public int Not_Id {
            get {
                return ((int)(this[this.tableNot.Not_IdColumn]));
            }
            set {
                this[this.tableNot.Not_IdColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public int And_Id {
            get {
                try {
                    return ((int)(this[this.tableNot.And_IdColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'And_Id\' in table \'Not\' is DBNull.", e);
                }
            }
            set {
                this[this.tableNot.And_IdColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public int expression_Id {
            get {
                try {
                    return ((int)(this[this.tableNot.expression_IdColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'expression_Id\' in table \'Not\' is DBNull.", e);
                }
            }
            set {
                this[this.tableNot.expression_IdColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public AndRow AndRow {
            get {
                return ((AndRow)(this.GetParentRow(this.Table.ParentRelations["And_Not"])));
            }
            set {
                this.SetParentRow(value, this.Table.ParentRelations["And_Not"]);
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public expressionRow expressionRow {
            get {
                return ((expressionRow)(this.GetParentRow(this.Table.ParentRelations["expression_Not"])));
            }
            set {
                this.SetParentRow(value, this.Table.ParentRelations["expression_Not"]);
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IsattributeValueNull() {
            return this.IsNull(this.tableNot.attributeValueColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetattributeValueNull() {
            this[this.tableNot.attributeValueColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IsattributeNull() {
            return this.IsNull(this.tableNot.attributeColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetattributeNull() {
            this[this.tableNot.attributeColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IsAnd_IdNull() {
            return this.IsNull(this.tableNot.And_IdColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetAnd_IdNull() {
            this[this.tableNot.And_IdColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool Isexpression_IdNull() {
            return this.IsNull(this.tableNot.expression_IdColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Setexpression_IdNull() {
            this[this.tableNot.expression_IdColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public EqualsRow[] GetEqualsRows() {
            if ((this.Table.ChildRelations["Not_Equals"] == null)) {
                return new EqualsRow[0];
            }
            else {
                return ((EqualsRow[])(base.GetChildRows(this.Table.ChildRelations["Not_Equals"])));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public InGroupRow[] GetInGroupRows() {
            if ((this.Table.ChildRelations["Not_InGroup"] == null)) {
                return new InGroupRow[0];
            }
            else {
                return ((InGroupRow[])(base.GetChildRows(this.Table.ChildRelations["Not_InGroup"])));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public OrRow[] GetOrRows() {
            if ((this.Table.ChildRelations["Not_Or"] == null)) {
                return new OrRow[0];
            }
            else {
                return ((OrRow[])(base.GetChildRows(this.Table.ChildRelations["Not_Or"])));
            }
        }
    }
    
    /// <summary>
    ///Represents strongly named DataRow class.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public partial class InGroupRow : global::System.Data.DataRow {
        
        private InGroupDataTable tableInGroup;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal InGroupRow(global::System.Data.DataRowBuilder rb) : 
                base(rb) {
            this.tableInGroup = ((InGroupDataTable)(this.Table));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string value {
            get {
                try {
                    return ((string)(this[this.tableInGroup.valueColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'value\' in table \'InGroup\' is DBNull.", e);
                }
            }
            set {
                this[this.tableInGroup.valueColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string InGroup_text {
            get {
                return ((string)(this[this.tableInGroup.InGroup_textColumn]));
            }
            set {
                this[this.tableInGroup.InGroup_textColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public int Not_Id {
            get {
                try {
                    return ((int)(this[this.tableInGroup.Not_IdColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'Not_Id\' in table \'InGroup\' is DBNull.", e);
                }
            }
            set {
                this[this.tableInGroup.Not_IdColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public int And_Id {
            get {
                try {
                    return ((int)(this[this.tableInGroup.And_IdColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'And_Id\' in table \'InGroup\' is DBNull.", e);
                }
            }
            set {
                this[this.tableInGroup.And_IdColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public int expression_Id {
            get {
                try {
                    return ((int)(this[this.tableInGroup.expression_IdColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'expression_Id\' in table \'InGroup\' is DBNull.", e);
                }
            }
            set {
                this[this.tableInGroup.expression_IdColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public NotRow NotRow {
            get {
                return ((NotRow)(this.GetParentRow(this.Table.ParentRelations["Not_InGroup"])));
            }
            set {
                this.SetParentRow(value, this.Table.ParentRelations["Not_InGroup"]);
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public AndRow AndRow {
            get {
                return ((AndRow)(this.GetParentRow(this.Table.ParentRelations["And_InGroup"])));
            }
            set {
                this.SetParentRow(value, this.Table.ParentRelations["And_InGroup"]);
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public expressionRow expressionRow {
            get {
                return ((expressionRow)(this.GetParentRow(this.Table.ParentRelations["expression_InGroup"])));
            }
            set {
                this.SetParentRow(value, this.Table.ParentRelations["expression_InGroup"]);
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IsvalueNull() {
            return this.IsNull(this.tableInGroup.valueColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetvalueNull() {
            this[this.tableInGroup.valueColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IsNot_IdNull() {
            return this.IsNull(this.tableInGroup.Not_IdColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetNot_IdNull() {
            this[this.tableInGroup.Not_IdColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IsAnd_IdNull() {
            return this.IsNull(this.tableInGroup.And_IdColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetAnd_IdNull() {
            this[this.tableInGroup.And_IdColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool Isexpression_IdNull() {
            return this.IsNull(this.tableInGroup.expression_IdColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Setexpression_IdNull() {
            this[this.tableInGroup.expression_IdColumn] = global::System.Convert.DBNull;
        }
    }
    
    /// <summary>
    ///Represents strongly named DataRow class.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public partial class OrRow : global::System.Data.DataRow {
        
        private OrDataTable tableOr;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal OrRow(global::System.Data.DataRowBuilder rb) : 
                base(rb) {
            this.tableOr = ((OrDataTable)(this.Table));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public int Or_Id {
            get {
                return ((int)(this[this.tableOr.Or_IdColumn]));
            }
            set {
                this[this.tableOr.Or_IdColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public int Not_Id {
            get {
                try {
                    return ((int)(this[this.tableOr.Not_IdColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'Not_Id\' in table \'Or\' is DBNull.", e);
                }
            }
            set {
                this[this.tableOr.Not_IdColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public int And_Id {
            get {
                try {
                    return ((int)(this[this.tableOr.And_IdColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'And_Id\' in table \'Or\' is DBNull.", e);
                }
            }
            set {
                this[this.tableOr.And_IdColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public int expression_Id {
            get {
                try {
                    return ((int)(this[this.tableOr.expression_IdColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'expression_Id\' in table \'Or\' is DBNull.", e);
                }
            }
            set {
                this[this.tableOr.expression_IdColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public NotRow NotRow {
            get {
                return ((NotRow)(this.GetParentRow(this.Table.ParentRelations["Not_Or"])));
            }
            set {
                this.SetParentRow(value, this.Table.ParentRelations["Not_Or"]);
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public AndRow AndRow {
            get {
                return ((AndRow)(this.GetParentRow(this.Table.ParentRelations["And_Or"])));
            }
            set {
                this.SetParentRow(value, this.Table.ParentRelations["And_Or"]);
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public expressionRow expressionRow {
            get {
                return ((expressionRow)(this.GetParentRow(this.Table.ParentRelations["expression_Or"])));
            }
            set {
                this.SetParentRow(value, this.Table.ParentRelations["expression_Or"]);
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IsNot_IdNull() {
            return this.IsNull(this.tableOr.Not_IdColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetNot_IdNull() {
            this[this.tableOr.Not_IdColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IsAnd_IdNull() {
            return this.IsNull(this.tableOr.And_IdColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetAnd_IdNull() {
            this[this.tableOr.And_IdColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool Isexpression_IdNull() {
            return this.IsNull(this.tableOr.expression_IdColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Setexpression_IdNull() {
            this[this.tableOr.expression_IdColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public EqualsRow[] GetEqualsRows() {
            if ((this.Table.ChildRelations["Or_Equals"] == null)) {
                return new EqualsRow[0];
            }
            else {
                return ((EqualsRow[])(base.GetChildRows(this.Table.ChildRelations["Or_Equals"])));
            }
        }
    }
    
    /// <summary>
    ///Row event argument class
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class SiteRowChangeEvent : global::System.EventArgs {
        
        private SiteRow eventRow;
        
        private global::System.Data.DataRowAction eventAction;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public SiteRowChangeEvent(SiteRow row, global::System.Data.DataRowAction action) {
            this.eventRow = row;
            this.eventAction = action;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public SiteRow Row {
            get {
                return this.eventRow;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataRowAction Action {
            get {
                return this.eventAction;
            }
        }
    }
    
    /// <summary>
    ///Row event argument class
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class rulesRowChangeEvent : global::System.EventArgs {
        
        private rulesRow eventRow;
        
        private global::System.Data.DataRowAction eventAction;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public rulesRowChangeEvent(rulesRow row, global::System.Data.DataRowAction action) {
            this.eventRow = row;
            this.eventAction = action;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public rulesRow Row {
            get {
                return this.eventRow;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataRowAction Action {
            get {
                return this.eventAction;
            }
        }
    }
    
    /// <summary>
    ///Row event argument class
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class groupRowChangeEvent : global::System.EventArgs {
        
        private groupRow eventRow;
        
        private global::System.Data.DataRowAction eventAction;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public groupRowChangeEvent(groupRow row, global::System.Data.DataRowAction action) {
            this.eventRow = row;
            this.eventAction = action;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public groupRow Row {
            get {
                return this.eventRow;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataRowAction Action {
            get {
                return this.eventAction;
            }
        }
    }
    
    /// <summary>
    ///Row event argument class
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class expressionRowChangeEvent : global::System.EventArgs {
        
        private expressionRow eventRow;
        
        private global::System.Data.DataRowAction eventAction;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public expressionRowChangeEvent(expressionRow row, global::System.Data.DataRowAction action) {
            this.eventRow = row;
            this.eventAction = action;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public expressionRow Row {
            get {
                return this.eventRow;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataRowAction Action {
            get {
                return this.eventAction;
            }
        }
    }
    
    /// <summary>
    ///Row event argument class
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class AndRowChangeEvent : global::System.EventArgs {
        
        private AndRow eventRow;
        
        private global::System.Data.DataRowAction eventAction;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public AndRowChangeEvent(AndRow row, global::System.Data.DataRowAction action) {
            this.eventRow = row;
            this.eventAction = action;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public AndRow Row {
            get {
                return this.eventRow;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataRowAction Action {
            get {
                return this.eventAction;
            }
        }
    }
    
    /// <summary>
    ///Row event argument class
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class EqualsRowChangeEvent : global::System.EventArgs {
        
        private EqualsRow eventRow;
        
        private global::System.Data.DataRowAction eventAction;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public EqualsRowChangeEvent(EqualsRow row, global::System.Data.DataRowAction action) {
            this.eventRow = row;
            this.eventAction = action;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public EqualsRow Row {
            get {
                return this.eventRow;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataRowAction Action {
            get {
                return this.eventAction;
            }
        }
    }
    
    /// <summary>
    ///Row event argument class
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class NotRowChangeEvent : global::System.EventArgs {
        
        private NotRow eventRow;
        
        private global::System.Data.DataRowAction eventAction;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public NotRowChangeEvent(NotRow row, global::System.Data.DataRowAction action) {
            this.eventRow = row;
            this.eventAction = action;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public NotRow Row {
            get {
                return this.eventRow;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataRowAction Action {
            get {
                return this.eventAction;
            }
        }
    }
    
    /// <summary>
    ///Row event argument class
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class InGroupRowChangeEvent : global::System.EventArgs {
        
        private InGroupRow eventRow;
        
        private global::System.Data.DataRowAction eventAction;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public InGroupRowChangeEvent(InGroupRow row, global::System.Data.DataRowAction action) {
            this.eventRow = row;
            this.eventAction = action;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public InGroupRow Row {
            get {
                return this.eventRow;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataRowAction Action {
            get {
                return this.eventAction;
            }
        }
    }
    
    /// <summary>
    ///Row event argument class
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class OrRowChangeEvent : global::System.EventArgs {
        
        private OrRow eventRow;
        
        private global::System.Data.DataRowAction eventAction;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public OrRowChangeEvent(OrRow row, global::System.Data.DataRowAction action) {
            this.eventRow = row;
            this.eventAction = action;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public OrRow Row {
            get {
                return this.eventRow;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataRowAction Action {
            get {
                return this.eventAction;
            }
        }
    }
}
